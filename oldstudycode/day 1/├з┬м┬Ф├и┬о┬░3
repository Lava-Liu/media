元字符：*：字符替代，数量不固定，符号的值不固定
？：字符替代。数量固定之替代一个字符，值不固定
【】：一个字符的范围指定【a-z】【a-z A-z】 【0-6】
；：shell 命令分割符
cal：显示日历
date：现实当前时间
| 管道 ，把管道前面的执行结果交给管道后面的命令来处理
<输入重定向
>输入重定向
>>：追加
   系统中每打开一个文件。kernel都会默认打开三个符号 0 1 2
0 ：标准输入
1： 标准输出9
2： 标准错误

awk -F(指明分隔符) : '{print $1  }'





文件察看：
head -n （n：行数） filename
tail -n filename
默认情况下现实十行


sort 排序 默认情况不会改变原文件内容
-u：跳过重复行排序
uniq：消除相邻重复行
比较两个文件内容是否相同：
diff 『opts』 file1 file2

-u ：统一显示方式，打印出不同行的全部信息
-y ：分屏显示
file：察看文件的类型以及执行属性

echo ：shell 中的输出打印命令 
默认情况下会自动在打印信息的最后添加换行符\n
-n ：打印信息后不添加换行符\n
-e  ：让转意字符生效
script ：脚本记录
默认信息记录在typescript文件中
script filename 指定记录信息的文件


vi 
vi filename 打开或创建一个名字为filename文件
 vi 在内存中开辟一块临时区域录入数据



切换到编辑模式：
1.i/I在光标当前位置开始插入数据
2.a 在光标所在位置的后一位置插入数据 
 A 光标移动到行尾，进行插入数据
3：o 光标所在位置的下一行插入一个空行
O 光标所在位置插入一个空行
x：删除一个字符
dw：删除一个单词
从光标位置开始计算，到特殊符号/标点符号/空白字符位置停止
3dw：从光标位置开始向后删除三个单词
dd：删除光标所在行
5dd：删除光标所在行下面五行
：5：10d 删除第五行至第十行
u 取消前面的操作
删除 后的文件存放在缓存区里面

拷贝
存盘

命令模式：
gg：光标跳转到文件的开始
G：光标跳转到文件的末尾


字符串替换
1：把文件中的第一行到第十行中”HHH“替换成”MMM“
：1，10s/hhh/mmm -》替换找到的每行的第一个字符串
：1，10s/hhh/mmm/g（global）
$代表到文件的末尾
===》：1，$s/HHH/MMM/g ===>全文替换
：%s/hhhh/mmmm/g 全文替换


在当前文件插入另一个文件的内容：
：r filename
c程序
1.接口， 头文件
2.接口的实现 ，.c的实现文件
2.调用  .c的调用文件
gcc -c rtang.c -I. -o rtang.o


find：
-name：俺名字查找

-print：查找信息输出
-mtime：俺最后一次修改时间查找
-user：俺文件的拥有者查找
-size：按文件的大小查找（过滤）
-perm：按文件的权限查找；
-type： 按文件类型查找
-atime： 按最后一次访问时间查找
-exec：查找之后调用其他命令处理查找结果
对于处理命令 ，后面需要跟前面的处理结果作为参数，我们需要使用{}\占参数位置
xargs表示把前面的所有信息分开交给后面的命令 其后面所连接的命令必须具有批量处理功能














